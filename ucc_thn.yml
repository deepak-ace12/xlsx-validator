required: &required
  RequiredValidator:
    error_msg: Cell Value can not be blank.

regex: &regex
  RegexValidator:
    #regex for alphanumeric value
    pattern: "^[a-zA-Z0-9_]+$"
    full_match: true
    error_msg: Cell value do not match the pattern.
  <<: *required

max_length: &max_length
  LengthValidator:
    operation: max
    threshold: 30
    error_msg: Cell value is too long in length.
    trim: true
  <<: *required

min_length: &min_length
  LengthValidator:
    operation: min
    threshold: 3
    error_msg: Cell value is too short in length.
    trim: false
  <<: *required

options: &options
  OptionValidator:
    options: [Male, Female]
    error_msg: Cell value must be a valid option.
    case_sensitive: false
  <<: *required

email: &email
  EmailValidator:
    error_msg: Cell has an invalid email address.
    trim: true
  <<: *required

premitive_int: &premitive_int
  TypeValidator:
    type: int
    error_msg: Cell value must be a whole number.
  <<: *required

premitive_float: &premitive_float
  TypeValidator:
    type: float
    error_msg: Cell value must be a decimal value.
  <<: *required

premitive_bool: &premitive_bool
  TypeValidator:
    type: bool
    error_msg: Cell value must be a boolean value i.e. true, false, 0, 1.
  <<: *required

datetime: &datetime
  DateTimeValidator:
    format: "%d-%m-%Y %H:%M:%S"
    error_msg: Datetime format must be %d-%m-%Y %H:%M:%S
  <<: *required

date: &date
  DateTimeValidator:
    format: "%Y-%m-%d"
    error_msg: Date format must be yyyy-mm-dd.
  <<: *required

excel_date: &excel_date
  # sometimes dates in excel are stored as number, e.g.
  # 42029 is 25/1/2015 and 42029.59236 is 2015-01-25 14:12:59
  ExcelDateValidator:
    error_msg: Value must be an excel date number.
  <<: *required

comparator_gt: &comparator_gt
  ComparatorValidator:
    operation: "gt"
    threshold: 10
    error_msg: Cell value should not be greater than 10.
  <<: *required

comparator_lt: &comparator_lt
  ComparatorValidator:
    operation: "lt"
    threshold: 0
    error_msg: Cell value should not be less than 0.
  <<: *required

not_negative: &not_negative
  NonNegativeValidator:
    type: int
    error_msg: Cell value must be a non negative value.
  <<: *required


sheets:     # names of the sheets of the file that need validation
  - Example
  - Students

# CASE: 1 - if column names are fixed but their positions are not,
# create the yaml file with column names
# CASE: 2 - if column names are not fixed but the position of the columns are,
# create the yaml file with column letters i.e. A, B, C, etc.
# look for COLUMN_CASES comment in validate_xlsx.py file

Example:  # Sheet Name
  exclude:         # these columns will not be validated
    - "Exclude 1"
    - "Exclude 2"

  iterate_by_header_name: true # if headers are not fixed, set it to false. Iteration will be done by column_letter.

  must_have_columns:
    - ID
    - Gender
    - First Name
    - Last Name
    - Email

  validations:

    # default validator works for columns for which no validation is defined.
    # default validator does not work for excluded columns.
    # remove this class if you don't want to set default validator

    default:
      - <<: *required

    columns:
      ID:
        - <<: *not_negative
        - <<: *comparator_lt

      Title:
        - <<: *options
          OptionValidator:
            options: [Ms., Mr., Mrs.]
            case_sensitive: false
            error_msg: Invalid option.

      First Name:
        - <<: *min_length

      Last Name:
        - <<: *max_length

      Gender:
        - <<: *options

      Email:
        - <<: *email

      Age:
        - <<: *not_negative

      CGPA:
        - <<: *comparator_gt
        - <<: *comparator_lt

      Married:
        - <<: *premitive_bool

      DOB:
        - <<: *excel_date

      Last Active:
        - <<: *datetime

      Next Login:
        - <<: *date

      Username:
        - <<: *regex


Students: # Sheet Name
  exclude: []

  iterate_by_header_name: true # if headers are not fixed, set it to false. Iteration will be done by column_letter.

  must_have_columns:
    - Roll No
    - Batch

  validations:
    default:
      - <<: *required

    columns:
      Name:
        - <<: *regex
          RegexValidator:
          #regex for alphabets which can have .(dot)
            pattern: "[a-zA-Z\\.?\\ ]+$" # use two backward slash \\ for single \
            full_match: true
            error_msg: Cell value does not have a valid name.
